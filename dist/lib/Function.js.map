{"version":3,"sources":["Function.js"],"names":["uid","Math","floor","random","toString","slice","set","key","value","g","Function","gid","undefined","prototype","partial","args","id","fn","fn_string","lhs_index","indexOf","rhs_index","all_names","match","arg_names","filter","n","JSON","stringify"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;;;AACA,CAAC,YAAM;AACH,QAAMA,MAAM,SAANA,GAAM,GAAM;AACd,eAAOC,KAAKC,KAAL,CAAW,kBAAkB,gBAAgBD,KAAKE,MAAL,EAA7C,EAA4DC,QAA5D,CAAqE,EAArE,EAAyEC,KAAzE,CAA+E,CAA/E,CAAP;AACH,KAFD;AAGA,QAAMC,MAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,KAAN,EAAgB;AACxB,YAAMC,IAAIC,SAAS,eAAT,GAAV;AACA,YAAID,iBAAeE,GAAf,MAA0BC,SAA9B,EAAyC;AACrCH,6BAAeE,GAAf,IAAwB,EAAxB;AACH;AACD,YAAIH,UAAUI,SAAd,EAAyB;AACrBH,6BAAeE,GAAf,EAAsBJ,GAAtB,IAA6BC,KAA7B;AACH;AACD,eAAOC,iBAAeE,GAAf,EAAsBJ,GAAtB,CAAP;AACH,KATD;AAUA,QAAMI,MAAMX,KAAZ;AACA;;;;;;;;;;;;;;;;;;;AAmBAU,aAASG,SAAT,CAAmBC,OAAnB,GAA6B,YAAqB;AAAA,YAAXC,IAAW,uEAAJ,EAAI;;AAC9C,YAAMC,KAAKhB,KAAX;AACA,YAAMiB,KAAKX,IAAIU,EAAJ,EAAQ,IAAR,CAAX;AACA,YAAME,YAAYD,GAAGb,QAAH,EAAlB;AACA,YAAMe,YAAYD,UAAUE,OAAV,CAAkB,GAAlB,IAAyB,CAA3C;AACA,YAAMC,YAAYH,UAAUE,OAAV,CAAkB,GAAlB,CAAlB;AACA,YAAME,YAAYJ,UACbb,KADa,CACPc,SADO,EACIE,SADJ,EACeE,KADf,CACqB,YADrB,CAAlB;AAEA,YAAMC,YAAYF,UACbG,MADa,CACN,UAACC,CAAD;AAAA,mBAAOA,KAAKX,IAAL,KAAc,KAArB;AAAA,SADM,CAAlB;AAEA,eAAOL,6CAAYc,SAAZ,8DACiBG,KAAKC,SAAL,CAAeN,SAAf,CADjB,yCAEiBK,KAAKC,SAAL,CAAeJ,SAAf,CAFjB,kCAGUG,KAAKC,SAAL,CAAeb,IAAf,CAHV,yOASwBJ,GATxB,cASkCK,EATlC,iFAAP;AAYH,KAtBD;AAuBH,CAzDD","file":"Function.js","sourcesContent":["\"use strict\";\n/* tslint:disable:ban-types */\n/* tslint:disable:interface-name */\n/* tslint:disable:no-console */\n/* tslint:disable:no-eval */\n/* tslint:disable:trailing-comma */\n(() => {\n    const uid = () => {\n        return Math.floor(101559956668416 - 2821109907456 * Math.random()).toString(36).slice(1);\n    };\n    const set = (key, value) => {\n        const g = Function(\"return global\")();\n        if (g[`_partials:${gid}`] === undefined) {\n            g[`_partials:${gid}`] = {};\n        }\n        if (value !== undefined) {\n            g[`_partials:${gid}`][key] = value;\n        }\n        return g[`_partials:${gid}`][key];\n    };\n    const gid = uid();\n    /**\n     * Allows  to  bind  *any* argument  using  their names  rather their\n     * positions. This approach is more flexible if the initial arguments\n     * are to be left unbound. For example, from the function `fn`\n     * ```javascript\n     * fn(arg_0, arg_1, .., arg_[n-3], arg_[n-2], arg_[n-1])\n     * ```\n     * we can create a new function `gn` which requires all arguments but\n     * the last and the *third last* parameter by applying the\n     * ```javascript\n     * gn = fn.partial({arg_[n-3]: val_[n-3], arg_[n-1]: val_[n-1]})\n     * ```\n     * partial operation.  The invocation  of  `gn`  would be  like  `gn(\n     * val_0, val_1, .., val_[n-2])`.  Notice that the relative positions\n     * of the *unbound* arguments is left intact.\n     *\n     * @param args a map of named arguments\n     * @returns a partially bound function\n     */\n    Function.prototype.partial = function (args = {}) {\n        const id = uid();\n        const fn = set(id, this);\n        const fn_string = fn.toString();\n        const lhs_index = fn_string.indexOf(\"(\") + 1;\n        const rhs_index = fn_string.indexOf(\")\");\n        const all_names = fn_string\n            .slice(lhs_index, rhs_index).match(/([^\\s,]+)/g);\n        const arg_names = all_names\n            .filter((n) => n in args === false);\n        return Function(...arg_names, `\"use strict\";\n            const all_names = ${JSON.stringify(all_names)};\n            const arg_names = ${JSON.stringify(arg_names)};\n            let args = ${JSON.stringify(args)};\n            for (const i in arguments) {\n                if (arguments.hasOwnProperty(i)) {\n                    args[arg_names[i]] = arguments[i];\n                }\n            }\n            return global[\"_partials:${gid}\"][\"${id}\"]\n                .apply(this, all_names.map(n => args[n]));\n        `);\n    };\n})();\n"]}